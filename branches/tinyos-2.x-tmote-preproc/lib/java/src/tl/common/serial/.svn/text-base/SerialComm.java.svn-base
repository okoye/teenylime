/***
 * * PROJECT
 * *    TeenyLIME
 * * VERSION
 * *    $LastChangedRevision$
 * * DATE
 * *    $LastChangedDate$
 * * LAST_CHANGE_BY
 * *    $LastChangedBy$
 * *
 * *	$Id$
 * *
 * *   TeenyLIME - Transiently Shared Tuple Space Middleware for
 * *               Wireless Sensor Networks
 * *
 * *   This program is free software; you can redistribute it and/or
 * *   modify it under the terms of the GNU Lesser General Public License
 * *   as published by the Free Software Foundation; either version 2
 * *   of the License, or (at your option) any later version.
 * *
 * *   This program is distributed in the hope that it will be useful,
 * *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 * *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * *   GNU General Public License for more details.
 * *
 * *   You should have received a copy of the GNU General Public License
 * *   along with this program; if not, you may find a copy at the FSF web
 * *   site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * *   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * *   Boston, MA  02111-1307, USA
 ***/

/*									tab:4
 * "Copyright (c) 2005 The Regents of the University  of California.  
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose, without fee, and without written
 * agreement is hereby granted, provided that the above copyright
 * notice, the following two paragraphs and the author appear in all
 * copies of this software.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY
 * PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
 * DAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
 *
 */

package tl.common.serial;

import net.tinyos.message.*;

import java.io.IOException;
import java.util.Enumeration;
import java.util.Vector;

import tl.common.types.Tuple;
import tl.common.types.TupleSerialMsg;
import tl.common.utils.Serializer;

public class SerialComm extends Thread implements MessageListener {

	private Vector<MoteIF> nodes;
	private Vector<_ITupleHandler> listeners;
	private boolean active;
	private Vector<TupleSerialMsg> tuple_msgs;
	private Vector<Tuple> tuples_tosend;

	public SerialComm(Vector<MoteIF> nodes) {
		if (nodes == null)
			this.nodes = new Vector<MoteIF>();
		else
			this.nodes = nodes;
		this.listeners = new Vector<_ITupleHandler>();
		this.active = false;
		this.tuple_msgs = new Vector<TupleSerialMsg>();
		this.tuples_tosend = new Vector<Tuple>();
	}

	public Vector<MoteIF> getSerials() {
		return nodes;
	}

	public void activate() {
		active = true;
		Enumeration<MoteIF> el = nodes.elements();
		while (el.hasMoreElements()) {
			el.nextElement().registerListener(new TupleSerialMsg(), this);
		}
		new Thread(this).start();
	}

	public void deactivate() {
		listeners.clear();
		Enumeration<MoteIF> el = nodes.elements();
		while (el.hasMoreElements()) {
			el.nextElement().registerListener(new TupleSerialMsg(), this);
		}
		active = false;
		synchronized (tuple_msgs) {
			tuple_msgs.notifyAll();
		}
		el = nodes.elements();
		while (el.hasMoreElements()) {
			el.nextElement().getSource().shutdown();
		}
	}

	public void addListener(_ITupleHandler listener) {
		listeners.add(listener);
	}

	public void removeListener(_ITupleHandler listener) {
		listeners.remove(listener);
	}

	public void messageReceived(int to, Message message) {
		if (message instanceof TupleSerialMsg) {
			synchronized (tuple_msgs) {
				tuple_msgs.add((TupleSerialMsg) message);
				tuple_msgs.notifyAll();
			}
		}
	}

	public void sendToAll(Tuple tuple) {
		TupleSerialMsg m = new TupleSerialMsg();
		m.set_data(Serializer.toSerial(tuple));
		sendToAll(m);
	}

	public void sendToOne(Tuple tuple) {
		TupleSerialMsg m = new TupleSerialMsg();
		m.set_data(Serializer.toSerial(tuple));
		sendToOne(m);
	}

	public void sendTo(Tuple tuple, MoteIF mote) {
		TupleSerialMsg m = new TupleSerialMsg();
		m.set_data(Serializer.toSerial(tuple));
		sendTo(m, mote);
	}

	public void sendToAll(Message msg) {
		try {
			Enumeration<MoteIF> el = nodes.elements();
			while (el.hasMoreElements()) {
				el.nextElement().send(MoteIF.TOS_BCAST_ADDR, msg);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void sendToOne(Message msg) {
		try {
			Enumeration<MoteIF> el = nodes.elements();
			if (el.hasMoreElements())
				el.nextElement().send(MoteIF.TOS_BCAST_ADDR, msg);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void sendTo(Message msg, MoteIF mote) {
		try {
			if (mote != null)
				mote.send(MoteIF.TOS_BCAST_ADDR, msg);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void run() {
		while (this.active) {
			TupleSerialMsg message = null;
			synchronized (tuple_msgs) {
				if (!tuple_msgs.isEmpty()) {
					message = tuple_msgs.remove(0);
				} else {
					try {
						tuple_msgs.wait();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
			if (message != null) {
				Tuple tuple = Serializer.toTuple(message.get_data());
				for (int i = 0; i < listeners.size(); i++)
					listeners.get(i).handleTuple(tuple);
			}
		}
	}

}
