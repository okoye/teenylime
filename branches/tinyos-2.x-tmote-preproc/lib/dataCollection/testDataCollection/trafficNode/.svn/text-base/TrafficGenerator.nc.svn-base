/***
 * * PROJECT
 * *    TeenyLIME
 * * VERSION
 * *    $LastChangedRevision$
 * * DATE
 * *    $LastChangedDate$
 * * LAST_CHANGE_BY
 * *    $LastChangedBy$
 * *
 * *	$Id$
 * *
 * *   TeenyLIME - Transiently Shared Tuple Space Middleware for
 * *               Wireless Sensor Networks
 * *
 * *   This program is free software; you can redistribute it and/or
 * *   modify it under the terms of the GNU Lesser General Public License
 * *   as published by the Free Software Foundation; either version 2
 * *   of the License, or (at your option) any later version.
 * *
 * *   This program is distributed in the hope that it will be useful,
 * *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 * *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * *   GNU General Public License for more details.
 * *
 * *   You should have received a copy of the GNU General Public License
 * *   along with this program; if not, you may find a copy at the FSF web
 * *   site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * *   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * *   Boston, MA  02111-1307, USA
 ***/

#ifdef PRINTF_SUPPORT
#include "printf.h"
#endif

#include "Constants.h"
#include "TupleSpace.h"

/**
 * A configuration to generate traffic of both class 1 and class 2.
 * 
 * @author Matteo Ceriotti
 *         <a href="mailto:ceriotti@fbk.eu">ceriotti@fbk.eu</a>
 *
 */

configuration TrafficGenerator {

  uses {
    interface Boot;
    interface TupleSpace as TS;
    interface CollectionInfo;
    interface Leds;
#ifdef PRINTF_SUPPORT
    interface SplitControl as PrintfControl;
    interface PrintfFlush;
#endif
  }
}

implementation {
  components TrafficCl1Task, TrafficCl2Task;

  components new TimerMilliC() as TimerSearchTaskCl1;
  components new TimerMilliC() as TimerSearchTaskCl2;
  
  components new TimerMilliC() as TimerTrafficCl2;
  components new TimerMilliC() as TimerReportCl1;
  components new TimerMilliC() as TimerSessionCl1;

  Boot = TrafficCl1Task.Boot;
  TS = TrafficCl1Task.TS;
  CollectionInfo = TrafficCl1Task;
  Leds = TrafficCl1Task.Leds;

#ifdef PRINTF_SUPPORT
  PrintfControl = TrafficCl1Task.PrintfControl;
  PrintfFlush = TrafficCl1Task.PrintfFlush;
#endif
  TrafficCl1Task.ReportPeriod -> TimerReportCl1;
  TrafficCl1Task.SessionPeriod -> TimerSessionCl1;
  TrafficCl1Task.TimerSearchTask -> TimerSearchTaskCl1;

  Boot = TrafficCl2Task.Boot;
  TS = TrafficCl2Task.TS;
  CollectionInfo = TrafficCl2Task;
  Leds = TrafficCl2Task.Leds;

#ifdef PRINTF_SUPPORT
  PrintfControl = TrafficCl2Task.PrintfControl;
  PrintfFlush = TrafficCl2Task.PrintfFlush;
#endif
  TrafficCl2Task.TrafficPeriod -> TimerTrafficCl2;
  TrafficCl2Task.TimerSearchTask -> TimerSearchTaskCl2;
}

