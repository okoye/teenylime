/***
 * * PROJECT
 * *    TeenyLIME
 * * VERSION
 * *    $LastChangedRevision$
 * * DATE
 * *    $LastChangedDate$
 * * LAST_CHANGE_BY
 * *    $LastChangedBy$
 * *
 * *	$Id$
 * *
 * *   TeenyLIME - Transiently Shared Tuple Space Middleware for
 * *               Wireless Sensor Networks
 * *
 * *   This program is free software; you can redistribute it and/or
 * *   modify it under the terms of the GNU Lesser General Public License
 * *   as published by the Free Software Foundation; either version 2
 * *   of the License, or (at your option) any later version.
 * *
 * *   This program is distributed in the hope that it will be useful,
 * *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 * *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * *   GNU General Public License for more details.
 * *
 * *   You should have received a copy of the GNU General Public License
 * *   along with this program; if not, you may find a copy at the FSF web
 * *   site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * *   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * *   Boston, MA  02111-1307, USA
 ***/

// maximum 1000 ms
#define RESET_PERIOD 700

/** 
 *  Watchdog component.
 *
 * @author Matteo Ceriotti
 *         <a href="mailto:ceriotti@fbk.eu">ceriotti@fbk.eu</a>
 *
 */

module WatchdogP {
  provides interface Watchdog;
  uses interface Timer<TMilli> as ResetTimer;
  uses interface Boot;
#ifdef PRINTF_SUPPORT
  uses interface SplitControl as PrintfControl;
  uses interface PrintfFlush;
#endif
}

implementation {

  event void Boot.booted(){
    call Watchdog.start();
  }

  command void Watchdog.start() {
    atomic WDTCTL = WDT_ARST_1000;
    call ResetTimer.startPeriodic(RESET_PERIOD);
  }

  command void Watchdog.stop() {
    call ResetTimer.stop();
    atomic WDTCTL = WDTPW + WDTHOLD;
  }

  event void ResetTimer.fired()
  {
    atomic WDTCTL = WDT_ARST_1000;
  }

#ifdef PRINTF_SUPPORT
  event void PrintfControl.startDone(error_t error) {
  }

  event void PrintfControl.stopDone(error_t error) {
  }

  event void PrintfFlush.flushDone(error_t error) {
  }
#endif
}
