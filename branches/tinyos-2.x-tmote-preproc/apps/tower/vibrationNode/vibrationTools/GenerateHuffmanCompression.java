/***
 * * PROJECT
 * *    TeenyLIME
 * * VERSION
 * *    $LastChangedRevision: 735 $
 * * DATE
 * *    $LastChangedDate: 2009-02-28 04:38:34 -0600 (Sat, 28 Feb 2009) $
 * * LAST_CHANGE_BY
 * *    $LastChangedBy: lmottola $
 * *
 * *	$Id: GenerateHuffmanCompression.java 735 2009-02-28 10:38:34Z lmottola $
 * *
 * *   TeenyLIME - Transiently Shared Tuple Space Middleware for
 * *               Wireless Sensor Networks
 * *
 * *   This program is free software; you can redistribute it and/or
 * *   modify it under the terms of the GNU Lesser General Public License
 * *   as published by the Free Software Foundation; either version 2
 * *   of the License, or (at your option) any later version.
 * *
 * *   This program is distributed in the hope that it will be useful,
 * *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 * *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * *   GNU General Public License for more details.
 * *
 * *   You should have received a copy of the GNU General Public License
 * *   along with this program; if not, you may find a copy at the FSF web
 * *   site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * *   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * *   Boston, MA  02111-1307, USA
 ***/

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.StringTokenizer;

public class GenerateHuffmanCompression {

	public static void main(String[] args) {

		if (args.length < 5 || args.length > 6
				|| (args.length == 6 && !args[6].equals("-keep"))) {
			printUsageAndExit();
		}

		try {
			if (args.length == 6 && args[5].equals("-keep")) {
				generateNesCCompressionCode(args[0], args[1], args[2], args[3],
						args[4], true);
			} else {
				generateNesCCompressionCode(args[0], args[1], args[2], args[3],
						args[4], false);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private static void generateNesCCompressionCode(String inputFile,
			String outputFile, String functionNameDic,
			String functionNameBitLen, String externalDicGenerator,
			boolean keepFiles) throws IOException, InterruptedException {

		if (!inputFile.equals("NULL")) {
			// Completing the input file to have all bytes appearing

			File f = new File(inputFile);
			if (f.isDirectory()) {
				inputFile = concatenateFiles(inputFile, f.list());
			}

			makeByteComplete(inputFile, inputFile + ".makeByteComplete");

			// Convert text representation to raw bytes
			convertToBytes(inputFile + ".makeByteComplete", inputFile
					+ ".bytes");

			// Generates the dictionary using external tool
			Process p = Runtime.getRuntime().exec(
					externalDicGenerator + " -t -i" + inputFile + ".bytes -o"
							+ outputFile + ".dic");
			p.waitFor();

			// Generates corresponding C code
			generateCFile(outputFile + ".dic", outputFile, functionNameDic,
					functionNameBitLen);

			// Delete temporary concat file
			if (f.isDirectory()) {
				new File(inputFile).delete();
			}

			// Delete other temp files if needed
			if (!keepFiles) {
				new File(inputFile + ".makeByteComplete").delete();
				new File(inputFile + ".bytes").delete();
				// new File(inputFile + ".dic").delete();
			}
		} else {
			generateNullCFile(outputFile, functionNameDic, functionNameBitLen);
		}
	}

	private static String concatenateFiles(String inputDir, String[] dir)
			throws IOException {

		String tempFileName = "TEMP_CONCAT.data";
		BufferedWriter outputFile = new BufferedWriter(new FileWriter(
				tempFileName));
		for (String dataFile : dir) {
			if (!dataFile.startsWith(".")) {
				BufferedReader input = new BufferedReader(new FileReader(
						inputDir + "/" + dataFile));
				String s0;
				while ((s0 = input.readLine()) != null) {
					outputFile.write(s0 + "\n");
				}
				input.close();
			}
		}
		outputFile.flush();
		return tempFileName;

	}

	private static String generateTag() {

		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		DateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
		Date today = new Date();
		String nowDate = dateFormat.format(today);
		String nowTime = timeFormat.format(today);

		String ret = "/***\n"
				+ " * * Automatically generated by HuffmanCompression on "
				+ nowDate + " " + nowTime + "\n * * DO NOT EDIT! \n ***/\n\n";

		return ret;
	}

	private static HashMap<String, DecompressSymbolCode> readDictionary(
			String dictionaryFile) throws IOException {

		// Reading the dictionary
		BufferedReader dicReader = new BufferedReader(new FileReader(
				dictionaryFile));
		HashMap<String, DecompressSymbolCode> coding = new HashMap<String, DecompressSymbolCode>();
		String s = null;
		while ((s = dicReader.readLine()) != null) {
			StringTokenizer stk = new StringTokenizer(s, " ");
			while (stk.hasMoreTokens()) {
				String symbol = stk.nextToken();
				// System.out.println("Symbol:" + symbol);
				// Ignores the EOF symbol
				if (!symbol.equals("EOF")) {
					// Ignore the count of this symbol in the dictionary
					stk.nextToken();
					String code = stk.nextToken();
					coding.put(symbol, new DecompressSymbolCode(code, (byte) code
							.length()));

				} else {
					break;
				}
			}
		}
		dicReader.close();
		return coding;

	}

	private static void generateNullCFile(String outputFile,
			String functionNameDic, String functionNameBitLen)
			throws IOException {

		// Generating NULL compression dictionary
		System.out.println("Generating NULL compression dictionary in "
				+ outputFile);
		BufferedWriter fileWriter = new BufferedWriter(new FileWriter(
				outputFile));

		// Writing tag
		fileWriter.write(generateTag());

		// Writing dictionary function
		fileWriter.write("uint16_t " + functionNameDic
				+ "(uint8_t symbol) {\n\n");
		fileWriter.write("  return symbol;\n");
		fileWriter.write("}\n\n");

		// Writing bit length function
		fileWriter.write("uint8_t " + functionNameBitLen
				+ "(uint8_t symbol) {\n\n");
		fileWriter.write("  return 8;\n");
		fileWriter.write("}\n\n");

		fileWriter.flush();
		fileWriter.close();

	}

	private static void generateCFile(String dictionaryFile, String outputFile,
			String functionNameDic, String functionNameBitLen)
			throws IOException {

		HashMap<String, DecompressSymbolCode> coding = readDictionary(dictionaryFile);

		// Generating compression dictionary
		System.out
				.println("Generating compression dictionary in " + outputFile);
		BufferedWriter fileWriter = new BufferedWriter(new FileWriter(
				outputFile));

		// Writing tag
		fileWriter.write(generateTag());

		// Writing dictionary function
		fileWriter.write("uint16_t " + functionNameDic
				+ "(uint8_t symbol) {\n\n");
		fileWriter.write("  const uint16_t codes[256] = { "
				+ coding.get(convertByteToHexString(0)).getCode() + "U");
		for (short symbol = 1; symbol < Math.pow(2, 8); symbol++) {
			fileWriter.write(", "
					+ coding.get(convertByteToHexString(symbol)).getCode()
					+ "U");
		}
		fileWriter.write(" };\n\n");

		fileWriter.write("  return codes[symbol];\n");

		fileWriter.write("}\n\n");

		// Writing bit length function
		fileWriter.write("uint8_t " + functionNameBitLen
				+ "(uint8_t symbol) {\n\n");
		fileWriter.write("  const uint8_t lengths[256] = { "
				+ coding.get(convertByteToHexString(0)).getLength());
		for (short symbol = 1; symbol < Math.pow(2, 8); symbol++) {
			fileWriter.write(", "
					+ coding.get(convertByteToHexString(symbol)).getLength());
		}
		fileWriter.write(" };\n\n");

		fileWriter.write("  return lengths[symbol];\n");

		fileWriter.write("}\n\n");

		fileWriter.flush();
		fileWriter.close();

	}

	private static String convertByteToHexString(int i) {

		String temp = Integer.toHexString(i);
		if (temp.length() == 1) {
			temp = "0" + temp;
		}
		temp = temp.toUpperCase();
		return "0x" + temp;
	}

	private static void makeByteComplete(String inputFile, String outputFile)
			throws IOException {

		BufferedReader input = new BufferedReader(new FileReader(inputFile));
		FileWriter output = new FileWriter(outputFile);

		HashSet<Short> bytesSeen = new HashSet<Short>();

		// Reading
		String s0;
		while ((s0 = input.readLine()) != null) {
			Short s = Short.parseShort(s0);
			bytesSeen.add(s);
			output.write(s0 + "\n");
		}
		input.close();

		// Completing
		for (short s = 0; s < Math.pow(2, 8); s++) {
			if (!bytesSeen.contains(s)) {
				// System.out.println("Adding " + s);
				output.write(String.valueOf(s) + "\n");
			}
		}

		output.flush();
		output.close();
	}

	private static void convertToBytes(String inputFile, String outputFile)
			throws IOException {

		BufferedReader input = new BufferedReader(new FileReader(inputFile));
		FileOutputStream output = new FileOutputStream(outputFile);

		String s0;
		while ((s0 = input.readLine()) != null) {
			output.write(Short.parseShort(s0));
		}
		input.close();
		output.flush();
		output.close();
	}

	private static void printUsageAndExit() {

		System.err
				.println("Usage: java GenerateHuffmanCompression inputDataFile outputCFile functionNameDic functionNameBitLen dictionaryGenerator [-keep]");
		System.err
				.println("To generate an empty dictionary, use NULL instead of inputDataFile");
		System.exit(-1);
	}

	protected static int convertToInt(String bitString) {

		int result = 0;
		char[] bits = bitString.toCharArray();
		for (int i = 0; i < bitString.length(); i++) {
			result = result + ((byte) bits[i] - 48)
					* (int) Math.pow(2, (bitString.length() - 1 - i));
		}

		if (result > MAX_SIZE_CODING) {
			System.out.println("Failed code conversion to 16 bits integer!");
			System.exit(-1);
		}
		return result;
	}

	private static final int MAX_SIZE_CODING = 0xFFFF;
}

class SymbolCode {

	private int code;
	private byte length;

	public SymbolCode(String codeString, byte length) {

		this.code = GenerateHuffmanCompression.convertToInt(codeString);
		this.length = length;
	}

	public int getCode() {
		return code;
	}

	public byte getLength() {
		return length;
	}
}
