/***
 * * PROJECT
 * *    TeenyLIME
 * * VERSION
 * *    $LastChangedRevision$
 * * DATE
 * *    $LastChangedDate$
 * * LAST_CHANGE_BY
 * *    $LastChangedBy$
 * *
 * *	$Id$
 * *
 * *   TeenyLIME - Transiently Shared Tuple Space Middleware for
 * *               Wireless Sensor Networks
 * *
 * *   This program is free software; you can redistribute it and/or
 * *   modify it under the terms of the GNU Lesser General Public License
 * *   as published by the Free Software Foundation; either version 2
 * *   of the License, or (at your option) any later version.
 * *
 * *   This program is distributed in the hope that it will be useful,
 * *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 * *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * *   GNU General Public License for more details.
 * *
 * *   You should have received a copy of the GNU General Public License
 * *   along with this program; if not, you may find a copy at the FSF web
 * *   site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * *   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * *   Boston, MA  02111-1307, USA
 ***/

#include "Constants.h"
#include "TupleSpace.h"

/**
 * Test application for TL PacketLink layer.
 */

#ifdef PRINTF_SUPPORT
#include "printf.h"
#endif

#define TIMER 10000

module HammerNail {

  uses {
    interface Boot;

    interface Timer<TMilli> as TimerApp;

    interface TupleSpace as TS;
    interface TeenyLIMESystem;

    interface Random;

    interface AMPacket;

    interface Leds;

#ifdef PRINTF_SUPPORT
    interface SplitControl as PrintfControl;
    interface PrintfFlush;
#endif
  }
}

implementation {

  uint16_t count = 0;
  tuple neighborTuple;
  TLOpId_t reactionId, outId, rdId, inId;

  event void Boot.booted() {

    tuple p = newTuple(2,
		       formalField(TYPE_UINT16_T),
		       formalField(TYPE_UINT16_T));

    neighborTuple = newTuple(1, actualField_uint16(call AMPacket.address()));
    if (call AMPacket.address() == PEER_A_ID) { 
      call TimerApp.startPeriodic(TIMER);
    } else {
      call TS.addReaction(&reactionId, FALSE, TL_LOCAL, &p);
    }
    
#ifdef PRINTF_SUPPORT
    call PrintfControl.start();
#endif
  }

  // Only executed on PEER_AD_ID
  event void TimerApp.fired() {

    tuple t = newTuple(2,
		       actualField_uint16(FAKE_DATA),
		       actualField_uint16(count++));
    call TS.out(&outId, TRUE, PEER_B_ID, &t);
  }
  
  // Only executed on PEER_B_ID 
  event void TS.tupleReady(TLOpId_t operationId, 
			   tuple *tuples, 
			   uint8_t number) {

    tuple temp;

    if (opIdCmp(&operationId, &reactionId)
	&& number == 1
	&& tuples[0].fields[0].value.int16 == FAKE_DATA) {
      copyTuple(&temp,&(tuples[0]));
      call TS.in(&inId, FALSE, TL_LOCAL, &temp);
    } else if (opIdCmp(&operationId, &inId)
	&& number == 1
	&& tuples[0].fields[0].value.int16 == FAKE_DATA) {
      if (tuples[0].fields[1].value.int16 != count) {
	call Leds.led0Toggle();
      } else {
	call Leds.led1Toggle();
      }
#ifdef PRINTF_SUPPORT      
      printf ("C %d\n",  tuples[0].fields[1].value.int16);
      call PrintfFlush.flush();
#endif
      count = tuples[0].fields[1].value.int16 + 1;
    }     
  }

  event tuple* TeenyLIMESystem.reifyNeighborTuple() {
    return &neighborTuple;
  }

  event void TS.reifyCapabilityTuple(tuple* ct) {
  }

  event void TS.tupleSpaceError(uint8_t errCode, 
				TLOpId_t operationId, 
				TLTarget_t target,  
				tuple* failedTuple) {

    // In case the reliable out failed, we are going to re-send the old value
    if (errCode == RELIABLE_MSG_FAIL) {
      count = failedTuple[0].fields[1].value.int16; 
      call Leds.led0Toggle();
#ifdef PRINTF_SUPPORT
      printf ("C %d %d\n", failedTuple[0].fields[1].value.int16, count);
#endif
    }
#ifdef PRINTF_SUPPORT
    call PrintfFlush.flush();
#endif
  }

#ifdef PRINTF_SUPPORT
  event void PrintfControl.startDone(error_t error) {
  }

  event void PrintfControl.stopDone(error_t error) {
  }

  event void PrintfFlush.flushDone(error_t error) {
  }
#endif
}

