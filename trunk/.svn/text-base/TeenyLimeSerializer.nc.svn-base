/***
 * * PROJECT
 * *    TeenyLIME 
 * * VERSION
 * *    $LastChangedRevision$
 * * DATE
 * *    $LastChangedDate$
 * * LAST_CHANGE_BY
 * *    $LastChangedBy$
 * *
 * *	$Id$
 * *
 * *   TeenyLIME - Transiently Shared Tuple Space Middleware for 
 * *               Wireless Sensor Networks
 * *
 * *   This program is free software; you can redistribute it and/or
 * *   modify it under the terms of the GNU Lesser General Public License
 * *   as published by the Free Software Foundation; either version 2
 * *   of the License, or (at your option) any later version.
 * *
 * *   This program is distributed in the hope that it will be useful,
 * *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 * *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * *   GNU General Public License for more details.
 * *
 * *   You should have received a copy of the GNU General Public License
 * *   along with this program; if not, you may find a copy at the FSF web
 * *   site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * *   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * *   Boston, MA  02111-1307, USA
 ***/

includes TupleSpace;
includes TupleMsg;
includes TLConf;

module TeenyLimeSerializer {
  provides {
    interface SendTuple;
    interface ReceiveTuple;
  }

  uses {
    interface ReliableSend;
    interface ReceiveMsg as Receive;
    interface NeighborSystem;
   }
}

implementation {

  TOS_Msg tosMsg;

  command result_t SendTuple.send(TLTarget_t target, tuple* tuples, 
				  uint8_t tupleNumber, msg_t operation, 
				  TLOpId_t operationId) {

    int i;
    TupleMsg *tupleMsg = (TupleMsg *)tosMsg.data;

    dbg (DBG_USR1, "TupleMsg size is %d\n",sizeof(TupleMsg));
    tupleMsg->nghTuple = *(call NeighborSystem.getNeighborTuple());

    for (i=0; i<tupleNumber && i<MAX_TUPLES_MSG; i++){
      tupleMsg->tuples[i] = tuples[i];
    }
    operationId.msgOrigin = TOS_LOCAL_ADDRESS;

    tupleMsg->tupleNumber = tupleNumber;
    tupleMsg->operation = operation;
    tupleMsg->operationId = operationId;

    if (tupleMsg->operation != REACT) {
      return call ReliableSend.send(target, sizeof(TupleMsg), &tosMsg, 
				    operationId.reliable);
    } else {
      return call ReliableSend.send(target, sizeof(TupleMsg), &tosMsg, FALSE);
    }
  }

  event TOS_MsgPtr Receive.receive(TOS_MsgPtr msg){
    TupleMsg* tlMsg = (TupleMsg*) msg->data;

    call NeighborSystem.update(tlMsg->operationId.msgOrigin, tlMsg->nghTuple);
    signal ReceiveTuple.receive(tlMsg->tuples, tlMsg->tupleNumber, 
				tlMsg->operation, tlMsg->operationId);
    return msg;
  }

  event result_t ReliableSend.deliveredMessage(TOS_MsgPtr msg) {
    TupleMsg* tlMsg = (TupleMsg*) msg->data;    
    signal ReceiveTuple.operationCompleted(tlMsg->operationId);

    return SUCCESS;
  }

  event result_t ReliableSend.sendDone(TOS_MsgPtr msg, result_t success) { 
    TupleMsg* tlMsg = (TupleMsg*) msg->data;

    return signal SendTuple.sendDone(tlMsg->operationId, success);
 }

/* #ifndef mica2 */
/*   command result_t SendTuple.sendSimMsg() { */
/*     int i; */
/*     TupleMsg *tlMsg = (TupleMsg *)tosMsg.data; */

/*     tlMsg->nghTuple = *(call NeighborSystem.getNeighborTuple()); */

/*     tlMsg->operation = SIM_MSG; */
/*     tlMsg->operationId.reliable = FALSE; */
/*     tlMsg->operationId.msgOrigin = TOS_LOCAL_ADDRESS; */

/*     return call ReliableSend.send(TOS_BCAST_ADDR,  */
/* 				  sizeof(TupleMsg),  */
/* 				  &tosMsg,  */
/* 				  tlMsg->operationId.reliable); */

/*     return SUCCESS; */
/*   } */
/* #endif */
}
