/***
 * * PROJECT
 * *    TeenyLIME 
 * * VERSION
 * *    $LastChangedRevision$
 * * DATE
 * *    $LastChangedDate$
 * * LAST_CHANGE_BY
 * *    $LastChangedBy$
 * *
 * *	$Id$
 * *
 * *   TeenyLIME - Transiently Shared Tuple Space Middleware for 
 * *               Wireless Sensor Networks
 * *
 * *   This program is free software; you can redistribute it and/or
 * *   modify it under the terms of the GNU Lesser General Public License
 * *   as published by the Free Software Foundation; either version 2
 * *   of the License, or (at your option) any later version.
 * *
 * *   This program is distributed in the hope that it will be useful,
 * *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 * *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * *   GNU General Public License for more details.
 * *
 * *   You should have received a copy of the GNU General Public License
 * *   along with this program; if not, you may find a copy at the FSF web
 * *   site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * *   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * *   Boston, MA  02111-1307, USA
 ***/

includes TupleSpace;
includes TupleMsg;

// TODO: implement min/max matching in TL

#define MIN_UINT16_T 0

/**
 * Routing module.
 * 
 * @author Luca Mottola 
 *         <a href="mailto:mottola@elet.polimi.it">mottola@elet.polimi.it</a>
 * 
 */
 
module Routing {

  uses {
    interface TupleSpace as TS;
  }

  provides interface StdControl;
}

implementation {

  TLOpId_t routingReaction;
  tuple messageTuple;
  tuple closestNeighbor;

  bool pendingMessage;
 
  command result_t StdControl.init() {
    pendingMessage = FALSE;
    closestNeighbor = newTuple(4, 
			       formalField(TYPE_UINT16_T), 
			       formalField(TYPE_UINT16_T), 
			       formalField(TYPE_UINT16_T), 
			       formalField(MIN_UINT16_T));
    return SUCCESS;
  }

  command result_t StdControl.start() {

    // The tuple format for routing tuples 
    // is <nodeId, nodePositionX, 
    //     nodePositionY, objectPositionX, 
    //     objectPositionY, objectPositionR>
    tuple template = newTuple(6, 
			      formalField(TYPE_UINT16_T), 
			      formalField(TYPE_UINT16_T), 
			      formalField(TYPE_UINT16_T), 
			      formalField(TYPE_FLOAT), 
			      formalField(TYPE_FLOAT), 
			      formalField(TYPE_FLOAT));  
    routingReaction = call TS.addReaction(FALSE,TL_LOCAL, &template);
    return SUCCESS;
  }

  command result_t StdControl.stop() { 
    return SUCCESS;
  }

  event result_t TS.reifyCapabilityTuple(tuple* t) {
    return SUCCESS;
  }

  event result_t TS.tupleReady(TLOpId_t operationId, 
			       tuple *tuples, 
			       uint8_t number){

    if (operationId.commandId == routingReaction.commandId
        && !pendingMessage) {
      pendingMessage = TRUE;
      messageTuple = tuples[0];   
      // Reading the TeenyLIME system to find the next hop towards the anchor
      call TS.rd (FALSE, TL_LOCAL, &closestNeighbor);
    } else {
      // Forwarding the message
      pendingMessage = FALSE;
      if (number != 0) {
        call TS.out (FALSE, tuples[0].fields[0].value.int16, &messageTuple);
      } 
    }
    return SUCCESS;
  }
}

