/***
 * * PROJECT
 * *    TeenyLIME 
 * * VERSION
 * *    $LastChangedRevision$
 * * DATE
 * *    $LastChangedDate$
 * * LAST_CHANGE_BY
 * *    $LastChangedBy$
 * *
 * *	$Id$
 * *
 * *   TeenyLIME - Transiently Shared Tuple Space Middleware for 
 * *               Wireless Sensor Networks
 * *
 * *   This program is free software; you can redistribute it and/or
 * *   modify it under the terms of the GNU Lesser General Public License
 * *   as published by the Free Software Foundation; either version 2
 * *   of the License, or (at your option) any later version.
 * *
 * *   This program is distributed in the hope that it will be useful,
 * *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 * *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * *   GNU General Public License for more details.
 * *
 * *   You should have received a copy of the GNU General Public License
 * *   along with this program; if not, you may find a copy at the FSF web
 * *   site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * *   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * *   Boston, MA  02111-1307, USA
 ***/

#include "Constants.h"

includes TupleSpace;

/**
 * A node with a reactive behavior (triggers reactions).
 * 
 * @author Luca Mottola 
 *         <a href="mailto:mottola@elet.polimi.it">mottola@elet.polimi.it</a>
 * 
 */

#define TIMER 5120
#define BOOT 20480

module ReactiveNode {

  uses {
    interface Timer as PeriodicTimer;
    interface TupleSpace as TS;
    interface TeenyLIMESystem;
  }

  provides interface StdControl;
}

implementation {
 
  tuple neighborTuple;

  command result_t StdControl.init() {

    neighborTuple = newTuple(2, 
			     actualField_uint16(TOS_LOCAL_ADDRESS), 
			     actualField_uint16(REACTIVE_NODE));
    return SUCCESS;
  }

  command result_t StdControl.start() {
    dbg (DBG_USR1, "Starting reactive node!\n");
    return call PeriodicTimer.start (TIMER_ONE_SHOT, BOOT);
  }

  command result_t StdControl.stop() {
    return call PeriodicTimer.stop ();
  }

  event result_t TS.reifyCapabilityTuple(tuple* ct) {
    return SUCCESS;
  }

  event result_t TS.tupleReady(TLOpId_t operationId, tuple *tuples, uint8_t number) {

    dbg (DBG_USR1, "Received unexpected tupleReady event!\n");
    return SUCCESS;
  }

  event tuple* TeenyLIMESystem.reifyNeighborTuple() {
    return &neighborTuple;
  }

  event result_t PeriodicTimer.fired() {

    tuple t = newTuple(2, 
		       actualField_uint16(REACTIVE_NODE), 
		       actualField_uint16(FAKE_DATA));
    dbg (DBG_USR1, "Outputting tuple\n");
    call TS.out(FALSE, TL_LOCAL, &t);            
    return call PeriodicTimer.start (TIMER_ONE_SHOT, TIMER);
  }
}
