/***
 * * PROJECT
 * *    TeenyLIME 
 * * VERSION
 * *    $LastChangedRevision$
 * * DATE
 * *    $LastChangedDate$
 * * LAST_CHANGE_BY
 * *    $LastChangedBy$
 * *
 * *	$Id$
 * *
 * *   TeenyLIME - Transiently Shared Tuple Space Middleware for 
 * *               Wireless Sensor Networks
 * *
 * *   This program is free software; you can redistribute it and/or
 * *   modify it under the terms of the GNU Lesser General Public License
 * *   as published by the Free Software Foundation; either version 2
 * *   of the License, or (at your option) any later version.
 * *
 * *   This program is distributed in the hope that it will be useful,
 * *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 * *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * *   GNU General Public License for more details.
 * *
 * *   You should have received a copy of the GNU General Public License
 * *   along with this program; if not, you may find a copy at the FSF web
 * *   site at 'www.gnu.org' or 'www.fsf.org', or you may write to the
 * *   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * *   Boston, MA  02111-1307, USA
 ***/

includes TupleSpace;

/**
 * A sample application using mutual exclusion.
 * 
 * @author Luca Mottola 
 *         <a href="mailto:mottola@elet.polimi.it">mottola@elet.polimi.it</a>
 * 
 */

#define REGION_ID 0
#define TOKEN_DELAY 5120
#define BOOT_DELAY 30720

module SampleMExclusionM {

  uses {
    interface MutualExclusion;
    interface Timer;
    interface TeenyLIMESystem;
    interface Leds;
  }   
  provides interface StdControl;
}

implementation {
  
   tuple localTuple;
   bool boot = TRUE;

  command result_t StdControl.init() {  

    localTuple = newTuple(2, 
			  actualField_uint16(TOS_LOCAL_ADDRESS), 
			  actualField_uint16(TOS_LOCAL_ADDRESS));
    return SUCCESS;
  }
  
  command result_t StdControl.start() {

    call MutualExclusion.startRequestCriticalRegion(REGION_ID);
    call Timer.start(TIMER_ONE_SHOT, BOOT_DELAY);
    return SUCCESS;
  }

  command result_t StdControl.stop() {
   return SUCCESS;
  }

  event result_t MutualExclusion.criticalRegionAquired(uint8_t regionId) {

   call Leds.greenOn();
   dbg(DBG_USR1, "Critical region acquired\n");

   call Timer.start(TIMER_ONE_SHOT, TOKEN_DELAY);
   return SUCCESS;
  }

  event result_t Timer.fired() {

    if (boot && TOS_LOCAL_ADDRESS == 0) {
      call MutualExclusion.initRegion(REGION_ID);
      boot = FALSE;
    } else if (boot) {
      boot = FALSE;
    } else {
      call Leds.greenOff();
      call MutualExclusion.releaseCriticalRegion(REGION_ID);
    }
    return SUCCESS;
  }

  event result_t MutualExclusion.lostCriticalRegion(uint8_t regionId) {

    dbg(DBG_USR1, "Critical region lost\n");
    return SUCCESS;
  }

  event tuple* TeenyLIMESystem.reifyNeighborTuple() {
    return &localTuple;
  }
}

